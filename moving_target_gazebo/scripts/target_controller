#!/usr/bin/env python

import rospy
import signal
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3
from std_msgs.msg import Float32
from nav_msgs.msg import Odometry
from sensor_msgs.msg import LaserScan
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import math
import string
import random

speed = 0.7

def vels(speed,Ku, rho_o):
    return " Set values: speed %s Ku %s rho_o %s" % (speed,Ku, rho_o)

def sgn(val):
    if (val < 0):
        return -1
    else :
        return 1

def clip_steercontrol(val):
    clipperVal = 1.5*math.pi
    if(val > clipperVal):
        return clipperVal
    elif(val<-clipperVal):
        return -clipperVal
    else:
        return val

def sat_cosdelta(val):
    clip = 0.2
    satVal = 0.0
    if(val < -clip):
        satVal = -1.0
    elif(val > clip):
        satVal = 1.0
    elif(val >= -clip and val <= clip):
        satVal = val/clip
    else:
        satVal = 0.0
    return(satVal)

#boundaryTrack params
global steerControl_bt, linvelControl_bt, a
steerControl_bt = linvelControl_bt = 0.0


#System params
LR = 5.0
rho_o = 4.0
Ku = 1.0
a = 2.0
randSteer_scale = 3.0
count = 0

def laserscanCb(msg):
        
    scanrangeList = msg.ranges
    rho = min(scanrangeList)
    laserA = float(abs(msg.angle_max))
    laserN = 721.0
    indR = float(scanrangeList.index(rho))
    delta = laserA*(2*indR/(laserN-1)-1)
    
    global steerControl_bt, linvelControl_bt,speed, a

    if (all(100.0 == min(elem,100.0) for elem in scanrangeList)):   
        steerControl_bt = randSteer_scale*random.uniform(-1,1)
        linvelControl_bt = speed
        state = 0
    else:
        if(any(elem < LR  for elem in scanrangeList)): 
            steerControl_bt = clip_steercontrol(Ku*sgn(math.cos(delta))*sgn(delta) + a*(1-(rho_o/rho)**2)*sgn(delta))
            linvelControl_bt = speed
            state = 1

        else:
            steerControl_bt = randSteer_scale*random.uniform(1,1)
            linvelControl_bt = speed
            state = 0


    dummyPub1.publish(rho)    
    dummyPub2.publish(state)


if __name__=="__main__":
    
    rospy.init_node('turtlebot_teleop',disable_signals=True)
    rate = rospy.Rate(100)
    dummyPub1 = rospy.Publisher('/t_dummy1', Float32, queue_size=10)
    dummyPub2 = rospy.Publisher('/t_dummy2', Float32, queue_size=10)
    pub = rospy.Publisher('/target/cmd_vel', Twist, queue_size=5)
    laserSub = rospy.Subscriber('/target/scan',LaserScan,laserscanCb)

    try:
        print vels(speed,Ku, rho_o)

        while not rospy.is_shutdown():
            try:
                twist = Twist()
                twist.linear.x = linvelControl_bt; twist.linear.y = 0; twist.linear.z = 0
                twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = steerControl_bt
                pub.publish(twist)
                rate.sleep()
            except KeyboardInterrupt:
                break

    except Exception as e:
        print("!!!!! Other Exception !!!!!")
        print(e.message)

    finally:
        twist = Twist()
        twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0
        twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0
        pub.publish(twist)