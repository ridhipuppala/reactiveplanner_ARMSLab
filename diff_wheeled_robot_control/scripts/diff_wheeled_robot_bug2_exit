#!/usr/bin/env python

import rospy
import signal
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3
from std_msgs.msg import Float32
from nav_msgs.msg import Odometry
from sensor_msgs.msg import LaserScan
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import math
import string

speed = 1
turn = 1

def vels(speed,turn,Ku,beta,sd):
    return " Set values: speed %s turn %s Ku %s beta %s Obst Safe Dist %s " % (speed,turn,Ku,beta,sd)

def get_rotation (msg):
    roll = pitch = yaw = 0.0
    orientation_q = msg.pose.pose.orientation
    orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
    (roll, pitch, yaw) = euler_from_quaternion (orientation_list)
    return yaw

def sgn(val):
    if (val < 0):
        return -1
    else :
        return 1

global gr, steerControl, linvelControl
gr = steerControl = linvelControl = 0.0
#target threshold radius
Rth = 1
maxerr = 0.3*speed
beta = 2 + (1 + Rth)*maxerr/speed

global mlineTheta, flag1, mlinVal
mlineTheta = 0.0
global state, prevState
state = flag1 = prevState = 0

def odometryCb(msg):
  
    global gr, steerControl, linvelControl, flag1, mlineTheta, state, mlinVal
    gx = msg.pose.pose.position.x
    gy = msg.pose.pose.position.y

    if(flag1 == 0):
        mlineTheta = math.atan2(gy,gx)
        flag1 = 1
    else:
        pass

    mlinVal = abs(gy - math.tan(mlineTheta)*gx)

    gr = math.sqrt(gx*gx + gy*gy)
    yaw = get_rotation(msg)
    #yaw is robot heading direction or angle between heading vector and global x axis
    theta = math.atan2(gy,gx)
    currspeed = msg.twist.twist.linear.x
    thetadot = (currspeed*math.sin(yaw - theta))/gr #thetadot computation

    if(gr < Rth):
        linvelControl = 0.0
        steerControl = 0.0
    else:
        steerControl = beta*currspeed*sgn(thetadot)/Rth
        linvelControl = speed

    alphaPub.publish(yaw)
    thPub.publish(theta)
    thdotPub.publish(thetadot)
    home_steer.publish(minRval)
    home_lin.publish(linvelControl)

#boundaryTrack params
global steerControl_bt, linvelControl_bt
steerControl_bt = linvelControl_bt = 0.0
Ku = 2
obstSD = 1.2

global stateChangeTime 
stateChangeTime = 0.0
global flag2
flag2 = 0

global minRval 
minRval = 1.0


def laserscanCb(msg):
        
    global minRval, steerControl_bt, linvelControl_bt, gr, state, flag2 , prevState, stateChangeTime, mlinVal
    scanrangeList = msg.ranges
    minRval = min(scanrangeList)
    laserA = float(abs(msg.angle_max))
    laserN = 721.0
    indR = float(scanrangeList.index(minRval))
    minDistangle = -laserA*(2*indR/(laserN-1)-1)


    if (gr < Rth):
        state = -1
        linvelControl_bt = 0.0
        steerControl_bt = 0.0
        linvelControl = 0.0
        steerControl = 0.0
        #print("Reached Home - no BT")

    else:

        if (all(100.0*msg.range_max == min(elem,100.0*msg.range_max)  for elem in scanrangeList)):     
            steerControl_bt = 0.0
            linvelControl_bt = 0.0
            state = 0
            #print("all inf - no obtacle in range max")
        else:
            if( all(elem > obstSD  for elem in scanrangeList)):
                linvelControl_bt = 0.0
                steerControl_bt = 0.0
                state = 0
                #print("Obstacle not close enough for BT")
            else:
                steerControl_bt = Ku*sgn(math.cos(minDistangle))*sgn(minDistangle)
                linvelControl_bt = speed
                state  = 1
        
    if( state == 1 and mlinVal < 0.1 and flag2 == 0 and rospy.get_time()>1.0 ):
        stateChangeTime = rospy.get_time()
        state = 0
        print("State Change")
        print(mlinVal)
    else:
        pass

    if(rospy.get_time() - stateChangeTime < 0.5 ):
        state = 0
        flag2 = 1
        print("Mline Homing")
    else:
        flag2 = 0
    
    prevState = state
        
            
    dummyPub1.publish(minRval)
    dummyPub2.publish(minDistangle*180/math.pi)
    bt_steer.publish(steerControl_bt)
    bt_lin.publish(linvelControl_bt)


if __name__=="__main__":

    rospy.init_node('turtlebot_teleop',disable_signals=True)
    rate = rospy.Rate(100)
    
    alphaPub = rospy.Publisher('/al_topic', Float32, queue_size=10)
    thPub = rospy.Publisher('/th_topic', Float32, queue_size=10)
    thdotPub = rospy.Publisher('/thdot_topic', Float32, queue_size=10)
    dummyPub1 = rospy.Publisher('/dummy1', Float32, queue_size=10)
    dummyPub2 = rospy.Publisher('/dummy2', Float32, queue_size=10)

    home_steer = rospy.Publisher('/home_steer', Float32, queue_size=10)
    home_lin = rospy.Publisher('/home_lin', Float32, queue_size=10)
    bt_steer = rospy.Publisher('/bt_steer', Float32, queue_size=10)
    bt_lin = rospy.Publisher('/bt_lin', Float32, queue_size=10)
    statePub = rospy.Publisher('/state', Float32, queue_size=10)
    speedPub = rospy.Publisher('/speed', Float32, queue_size=10)
    turnPub = rospy.Publisher('/turn', Float32, queue_size=10)



    pub = rospy.Publisher('/cmd_vel', Twist, queue_size=5)
    odomSub = rospy.Subscriber('/odom',Odometry,odometryCb)
    laserSub = rospy.Subscriber('/scan',LaserScan,laserscanCb)

    control_speed = 0.0
    control_turn = 0.0
        
    try:
        print vels(speed,turn,Ku,beta,obstSD)

        while not rospy.is_shutdown():
            try:

                if (state == 0):
                    control_speed = linvelControl
                    control_turn = steerControl
                    # if(minRval<0.5):
                    #     control_speed = linvelControl_bt
                    #     control_turn = steerControl_bt


                    
                elif (state == 1):
                    control_speed = linvelControl_bt
                    control_turn = steerControl_bt
                else:
                    control_speed = 0
                    control_turn = 0
                
                twist = Twist()
                twist.linear.x =  control_speed
                twist.angular.z = control_turn
                twist.linear.y = 0; twist.linear.z = 0
                twist.angular.x = 0; twist.angular.y = 0
                pub.publish(twist)
                statePub.publish(state)
                speedPub.publish(control_speed)
                turnPub.publish(control_turn)

                rate.sleep()

            except KeyboardInterrupt:
                break

    except Exception as e:
        print("!!!!! Other Exception !!!!!")
        print(e.message)

    finally:
        twist = Twist()
        twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0
        twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0
        pub.publish(twist)